@page "/"
@using Share.Model
@using Share.Util
@inject ChatClient ChatClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MessageService MessageService
@inject IJSRuntime Js
@inject ISnackbar Snackbar

<PageTitle>mutual.ie - chat</PageTitle>

<MudContainer Style="display: flex; flex-direction: column; height: 100%; padding: 0">

    <MudContainer id="chatContainer" Class="pa-1 my-1" Style="flex: 1; overflow: auto;">
        @foreach (var message in _messageList)
        {
            <MudChat ChatPosition=@GetChatBubblePosition(message.Sender)>
                <MudChatHeader Name=@message.Sender Time=@message.Timestamp.ToString("dd/MM HH:mm")/>
                <MudChatBubble>
                    @message.Content
                </MudChatBubble>
            </MudChat>
        }
    </MudContainer>

    <MudContainer Style="flex-shrink: 0" Class="pa-1 my-1">
        <AuthorizeView>
            <Authorized>
                <MudText>Chatting as @_currentUser</MudText>
                <MudTextField T="string" Label="Message" Variant="Variant.Outlined" @bind-value="_messageInput" Lines="3"/>
                <MudButton
                    Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary"
                    OnClick="Send" Disabled="@(!ChatClient.IsConnected())">Send</MudButton>
            </Authorized>
            <NotAuthorized>
                You must be logged in to send a message
                <LogIn/>
            </NotAuthorized>
        </AuthorizeView>
    </MudContainer>
    
</MudContainer>


<script>
    async function GoToLast(id) {
        if (!id) return;
        const container = document.getElementById(id);
        if (container) {
            container.scroll({
                top: 10000000,
                behavior: "smooth" });}}
</script>

@code {
    private List<Message> _messageList = [];
    private string? _messageInput;
    private string? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        try { _messageList = MessageService.GetMessages(); }
        catch { CreateNewInfoPopUp("Unexpected error getting your messages"); }
        
        ChatClient.OnMessageReceived += HandleMessageReceived;
        
        try { await ChatClient.StartConnection(); }
        catch { CreateNewInfoPopUp("Unexpected issue with your connection"); }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            _currentUser = user.FindFirst(c => c.Type == "name")?.Value;
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            await Js.InvokeVoidAsync("GoToLast", "chatContainer");
        }
        catch (Exception e)
        {
            ChatClient.Log(e);
        }
    }

    private void HandleMessageReceived(Message message)
    {
        _messageList.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        try
        {
            var sanitizedInput = InputSanitizer.Clean(_messageInput);
            var message = MessageFactory.Create(_currentUser ?? "Unknown User", sanitizedInput);
            MessageService.AddMessage(message);
            await ChatClient.SendMessage(message);
        }
        catch (ArgumentException e)
        {
            ChatClient.Log(e);
        }
        finally
        {
            _messageInput = "";
        }
    }

    private ChatBubblePosition GetChatBubblePosition(string sender)
    {
        if (_currentUser != null && _currentUser == sender)
        {
            return ChatBubblePosition.End;
        }
        return ChatBubblePosition.Start;
    }

    private void CreateNewInfoPopUp(string message)
    {
        Snackbar.Add(message);
    }

}
