@page "/"
@using Share.Model
@inject Client Client
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <AuthorizeView>
        <Authorized>
            <label>
                Message:
                <input @bind="_messageInput" size="50" />
            </label>
            <button @onclick="Send" disabled="@(!Client.IsConnected())">Send</button>
        </Authorized>
        <NotAuthorized>
            You must be logged in to send a message
            <LogIn/>
        </NotAuthorized>
    </AuthorizeView>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in Client.MessageList)
    {
        <li>@message.Sender @message.Content @message.Timestamp</li>
    }
</ul>

@code {
    private string? _messageInput;
    private string? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        Client.OnMessageReceived += HandleMessageReceived;
        await Client.StartConnection();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _currentUser = user.FindFirst(c => c.Type == "name")?.Value;
        }
    }

    private void HandleMessageReceived()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(_messageInput))
        {
            Message message = new(_currentUser ?? "Unknown user", _messageInput, DateTime.Now);
            await Client.SendMessage(message);
            _messageInput = "";
        }
    }
    
}
