@page "/"
@using Share.Model
@using Share.Util
@inject ChatClient ChatClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMessageService IMessageService

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <AuthorizeView>
        <Authorized>
            <label>
                Message:
                <input @bind="_messageInput" size="140" />
            </label>
            <button @onclick="Send" disabled="@(!ChatClient.IsConnected())">Send</button>
        </Authorized>
        <NotAuthorized>
            You must be logged in to send a message
            <LogIn/>
        </NotAuthorized>
    </AuthorizeView>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in _messageList)
    {
        <li>@message.Sender @message.Content @message.Timestamp</li>
    }
</ul>

@code {
    private List<Message> _messageList = [];
    private string? _messageInput;
    private string? _currentUser;

    protected override async Task OnInitializedAsync()
    {

        _messageList = IMessageService.GetMessages();
        ChatClient.OnMessageReceived += HandleMessageReceived;
        await ChatClient.StartConnection();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _currentUser = user.FindFirst(c => c.Type == "name")?.Value;
        }
    }

    private void HandleMessageReceived(Message message)
    {
        _messageList.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        try
        {
            var sanitizedInput = InputSanitizer.Clean(_messageInput);
            var message = MessageFactory.Create(_currentUser ?? "Unknown User", sanitizedInput);
            IMessageService.AddMessage(message);
            await ChatClient.SendMessage(message);
        }
        catch (ArgumentException e)
        {
            ChatClient.Log(e);
        }
        finally
        {
            _messageInput = "";
        }
    }
    
}
