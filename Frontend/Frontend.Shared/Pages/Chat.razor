@page "/"
@using Share.Model
@using Share.Util
@inject ChatClient ChatClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMessageService IMessageService

<PageTitle>Chat</PageTitle>

<MudPaper Class="pa-4 my-4" Style="height: 400px; overflow: auto;">
    @foreach (var message in _messageList)
    {
        <MudChat ChatPosition=@GetChatBubblePosition(message.Sender)>
            <MudChatHeader Name=@message.Sender Time=@message.Timestamp.TimeOfDay.ToString()/>
            <MudChatBubble>
                @message.Content
            </MudChatBubble>
        </MudChat>
    }
</MudPaper>

<div class="form-group">
    <AuthorizeView>
        <Authorized>
            <MudTextField T="string" Label="Outlined" Variant="Variant.Outlined" @bind-value="_messageInput" Lines="3" />
            <MudButton 
                Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary"
                OnClick="Send" Disabled="@(!ChatClient.IsConnected())">Send</MudButton>
        </Authorized>
        <NotAuthorized>
            You must be logged in to send a message
            <LogIn/>
        </NotAuthorized>
    </AuthorizeView>
</div>

<hr>

@code {
    private List<Message> _messageList = [];
    private string? _messageInput;
    private string? _currentUser;
    private int _pageNumber = 1;

    protected override async Task OnInitializedAsync()
    {

        _messageList = IMessageService.GetMessages(_pageNumber);
        ChatClient.OnMessageReceived += HandleMessageReceived;
        await ChatClient.StartConnection();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _currentUser = user.FindFirst(c => c.Type == "name")?.Value;
        }
    }

    private void HandleMessageReceived(Message message)
    {
        _messageList.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        try
        {
            var sanitizedInput = InputSanitizer.Clean(_messageInput);
            var message = MessageFactory.Create(_currentUser ?? "Unknown User", sanitizedInput);
            IMessageService.AddMessage(message);
            await ChatClient.SendMessage(message);
        }
        catch (ArgumentException e)
        {
            ChatClient.Log(e);
        }
        finally
        {
            _messageInput = "";
        }
    }

    private ChatBubblePosition GetChatBubblePosition(string sender)
    {
        if (_currentUser != null && _currentUser == sender)
        {
            return ChatBubblePosition.End;
        }
        return ChatBubblePosition.Start;
    }
    
}
